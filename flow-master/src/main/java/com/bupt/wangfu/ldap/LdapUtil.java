package com.bupt.wangfu.ldap;

import javax.naming.Context;
import javax.naming.NameClassPair;
import javax.naming.NamingEnumeration;
import javax.naming.NamingException;
import javax.naming.directory.*;
import javax.naming.ldap.InitialLdapContext;
import javax.naming.ldap.LdapContext;
import java.util.*;

public class LdapUtil {
	//???????????????????????? 
	private Hashtable<String, String> env = null;
	//Ldap ??????????????
	private LdapContext ctx = null;

	public LdapUtil() {
		env = new Hashtable<String, String>();
	}

	//????????OpenLdap????????????
	public void connectLdap() throws NamingException {
		//set the initializing information of the context
		env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
		//set the URL of ldap server
		env.put(Context.PROVIDER_URL, "ldap://localhost:389");
		//set the authentication mode
		env.put(Context.SECURITY_AUTHENTICATION, "simple");
		//set user of ldap server
		env.put(Context.SECURITY_PRINCIPAL, "cn=Manager,dc=maxcrc,dc=com");
		//set password of user
		env.put(Context.SECURITY_CREDENTIALS, "123456");

		//initialize the ldap context
		ctx = new InitialLdapContext(env, null);
	}

	//????????OpenLdap????
	public void closeContext() throws NamingException {
		ctx.close();
	}

	//????????Ldap??????????????
	public LdapContext getContext() {
		return this.ctx;
	}

	public void isExist(TopicEntry te) throws NamingException {
		ctx.lookup(te.getTopicPath());
	}

	/**
	 * ????????ou????
	 *
	 * @param newOUName ??????????????
	 * @param dest_path ????????????????
	 * @param ctx       LdapContext????????
	 */
	public void createOUEntry(TopicEntry new_topicEntry) {
		Attributes attrs = new BasicAttributes();
		attrs.put("ou", new_topicEntry.getTopicName());
		BasicAttribute objectclassSet = new BasicAttribute("objectclass");
		objectclassSet.add("top");
		objectclassSet.add("organizationalUnit");
		attrs.put(objectclassSet);
		try {
			ctx.createSubcontext(new_topicEntry.getTopicPath(), attrs);
		} catch (NamingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * ????????????????????ou????
	 *
	 * @param newOUName ??????????????
	 * @param dest_path ????????????????
	 * @param topicCode ????????????
	 * @param ctx       LdapContext????????
	 */
	public void createOUEntryWithTopicCode(TopicEntry new_topicEntry) {
		Attributes attrs = new BasicAttributes();
		attrs.put("ou", new_topicEntry.getTopicName());
		BasicAttribute objectclassSet = new BasicAttribute("objectclass");
		objectclassSet.add("top");
		objectclassSet.add("organizationalUnit");
		attrs.put(objectclassSet);
		attrs.put("description", new_topicEntry.getTopicCode());
		try {
			ctx.createSubcontext(new_topicEntry.getTopicPath(), attrs);
		} catch (NamingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * ????????????????????????????????????????
	 *
	 * @param goal_path ????????????????
	 * @param ctx       Ldap ??????????????
	 */
	public void delete(TopicEntry te) {
		try {
			ctx.destroySubcontext(te.getTopicPath());
		} catch (NamingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * ??????????????????????????????????????????????????????
	 *
	 * @param goal_path ????????????????
	 * @param lc        Ldap ??????????????
	 * @throws NamingException
	 */
	public void deleteWithAllChildrens(TopicEntry te) throws NamingException {
		List<TopicEntry> delete = getWithAllChildrens(te);
		for (int i = delete.size() - 1; i >= 0; i--) {
			ctx.destroySubcontext(delete.get(i).getTopicPath());
		}
	}

	/**
	 * ??????????????
	 *
	 * @param nameWithOU ??ou????????????????????"ou=topic"
	 * @return ????ou????????????????????"topic"
	 */
	public String getTopicString(String nameWithOU) {
		return nameWithOU.substring(3, nameWithOU.length());
	}

	/**
	 * ????????
	 *
	 * @param path OpenLDAP??????????????????"ou=subTopic,ou=topic"
	 * @return ??????OpenLDAP??????????"ou=subTopic,ou=topic,dc=wsn,dc=com"
	 */
	public String wrapper(String path, String _wrapper) {
		return path + "," + _wrapper;
	}

	/**
	 * ??????????????????????????
	 *
	 * @param topic_path ??????????????
	 * @param lc         Ldap ??????????????
	 * @return ????????????????????????????????????????
	 * @throws NamingException
	 */
	public List<TopicEntry> getWithAllChildrens(TopicEntry te) throws NamingException {
		List<TopicEntry> childrens = new ArrayList<TopicEntry>();
		//??????????????????????
		TopicEntry root = new TopicEntry();
		root.setTopicName(getTopicString(te.getTopicPath().split(",")[0]));
		Attributes attrs = ctx.getAttributes(te.getTopicPath());
		root.setTopicCode(attrs.get("description").toString().split(": ")[1]);
		root.setTopicPath(te.getTopicPath());
		childrens.add(root);
		//??????????????????????????????????????
		Queue<TopicEntry> queue = new LinkedList<TopicEntry>();
		queue.offer(root);
		while (!queue.isEmpty()) {
			TopicEntry temp = queue.poll();
			List<TopicEntry> list = getSubLevel(temp);
			if (!list.isEmpty()) {
				for (int i = 0; i < list.size(); i++) {
					childrens.add(list.get(i));
					queue.offer(list.get(i));
				}
			}
		}
		return childrens;
	}

	/**
	 * ??????????????????????????????
	 *
	 * @param topic_path ??????????????
	 * @param lc         Ldap ??????????????
	 * @return ????????????????????????????????????????????
	 */
	public List<TopicEntry> getSubLevel(TopicEntry te) throws NamingException {
		List<TopicEntry> sub = new ArrayList<TopicEntry>();
		String sub_path = null;

		NamingEnumeration<NameClassPair> x = ctx.list(te.getTopicPath());
		while (x.hasMore()) {
			TopicEntry _te = new TopicEntry();
			_te.setTopicName(getTopicString(x.next().getName()));

			sub_path = "ou=" + _te.getTopicName() + "," + te.getTopicPath();
			Attributes attrs = ctx.getAttributes(sub_path);

			_te.setTopicCode(attrs.get("description").toString().split(": ")[1]);
			_te.setTopicPath(sub_path);

			sub.add(_te);
		}
		return sub;
	}

	/**
	 * ??????????????????????????
	 *
	 * @param goal_path ????????????????????
	 * @param topicCode ????
	 * @param lc        LdapContext????????
	 * @throws NamingException
	 */
	public void addTopicCode(TopicEntry te, String topicCode) throws NamingException {
		ModificationItem[] mods = new ModificationItem[1];
		Attribute attr = new BasicAttribute("description");
		attr.add(topicCode);
		mods[0] = new ModificationItem(LdapContext.ADD_ATTRIBUTE, attr);

		ctx.modifyAttributes(te.getTopicPath(), mods);
	}

	/**
	 * ??????????????????
	 *
	 * @param goal_path     ????????????
	 * @param new_topicCode ????????
	 * @param lc            LdapContext????????
	 * @throws NamingException
	 */
	public void modifyTopicCode(TopicEntry te, String new_topicCode) throws NamingException {
		ModificationItem[] mods = new ModificationItem[1];
		Attribute attr = new BasicAttribute("description");
		attr.add(new_topicCode);
		mods[0] = new ModificationItem(LdapContext.REPLACE_ATTRIBUTE, attr);

		ctx.modifyAttributes(te.getTopicPath(), mods);
	}

	/**
	 * ??????????????????
	 *
	 * @param goal_path ????????????????????
	 * @param lc        LdapContext????????
	 * @throws NamingException
	 */
	public void removeTopicCode(TopicEntry te) throws NamingException {
		ModificationItem[] mods = new ModificationItem[1];
		Attribute attr = new BasicAttribute("description");
		mods[0] = new ModificationItem(LdapContext.REMOVE_ATTRIBUTE, attr);
		ctx.modifyAttributes(te.getTopicPath(), mods);
	}

	/**
	 * ??????????????????
	 *
	 * @param te       ????????????????????????????????????????????????
	 * @param new_name ??????
	 * @param lc       LdapContext ??????????????
	 * @return ????????????????????
	 * @throws NamingException
	 */
	public TopicEntry rename(TopicEntry te, String new_name) throws NamingException {
		List<TopicEntry> ls = getSubLevel(te);
		if (ls.isEmpty()) {
			String old_name = te.getTopicName();
			String old_path = te.getTopicPath();
			String new_path = old_path.replaceFirst(old_name, new_name);
			ctx.rename(old_path, new_path);
			te.setTopicName(new_name);
			te.setTopicPath(new_path);
			return te;
		} else {
			return null;
		}
	}
}


















