package org.apache.servicemix.wsn.router.detection;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Date;
import java.util.Timer;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ConcurrentHashMap;

import org.apache.servicemix.wsn.router.mgr.RtMgr;
import org.apache.servicemix.wsn.router.msg.udp.MsgHeart;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public class DtMgr implements DtAction, IDt, Runnable {
	private static Log log = LogFactory.getLog(DtMgr.class);
	
	private static RandomAccessFile testLog;
//	private long threshold = 30000;//失效阀值的缺省值
//	private long sendPeriod = 10000;//发送频率的缺省值
//	private long scanPeriod = 15000;//扫描频率的缺省值
//	private long synPeriod = 60000;//同步频率的缺省值

	private RtMgr rtMgr;//调度模块

	private Timer timer;//计时器
	private DtTask scanTask;//扫描任务
	private DtTask sendTask;//发送任务
	private DtTask synTask;//同步任务

	private ConcurrentHashMap<String, Long> tbl;//心跳信息表，key为目标标识（目标是集群的话为集群名，目标为代理的话为其地址），value为时间的long表示
	private ArrayBlockingQueue<MsgHeart> q;//心跳消息的队列

	public DtMgr(RtMgr rtMgr) {
		this.rtMgr = rtMgr;
//		this.threshold = threshold;
//		this.sendPeriod = sendPeriod;
//		this.scanPeriod = scanPeriod;
//		this.synPeriod = synPeriod;

		tbl = new ConcurrentHashMap<String, Long>();
		//added by shmily
		TestLog("initialize-tbl: " + tbl.toString());
		q = new ArrayBlockingQueue<MsgHeart>(500);
		//added by shmily
		TestLog("initialize-q: " + q.toString());
		timer = new Timer();
	}

//	public void setThresholdInitialize(long value) {//本地初始化
//		this.threshold = value;
//	}
//
//	public void setSendPeriodInitialize(long value) {
//		this.sendPeriod = value;
//	}
//
//	public void setScanPeriodInitialize(long value) {
//		this.scanPeriod = value;
//	}
//
//	public void setSynPeriodInitialize(long value) {
//		this.synPeriod = value;
//	}

	public void setThreshold(long value) {//远程配置
		rtMgr.threshold = value;
		TestLog("initialize-Threshold: " + value);
	}

	public void setSendPeriod(long value) {
		if (sendTask != null)
			sendTask.cancel();
		
		TestLog("initialize-Period: " + value);

		rtMgr.sendPeriod = value;
		sendTask = new DtTask(this, SEND);
		timer.schedule(sendTask, rtMgr.sendPeriod, rtMgr.sendPeriod);
	}

	public void setScanPeriod(long value) {
		if (scanTask != null)
			scanTask.cancel();

		rtMgr.scanPeriod = value;
		TestLog("initialize-scanPeriod: " + value);
		scanTask = new DtTask(this, SCAN);
		timer.schedule(scanTask, rtMgr.scanPeriod, rtMgr.scanPeriod);
	}

	public void setSynPeriod(long value) {
		if (synTask != null)
			synTask.cancel();

		rtMgr.synPeriod = value;
		TestLog("initialize-SynPeriod: " + value);
		synTask = new DtTask(this, SYN);
		timer.schedule(synTask, rtMgr.synPeriod, rtMgr.synPeriod);
	}

	public void action(int type) {
		// TODO Auto-generated method stub
		if (type == SCAN)
			scanAction();
		else if (type == SEND)
			sendAction();
		else
			synAction();
	}

	private void synAction() {
		// TODO Auto-generated method stub
		rtMgr.synSubs();
	}

	private void scanAction() {
		Date cur = new Date();
		for (String in : tbl.keySet()) {
			//added by shmily
			TestLog("scanAction-cur: " + cur.getTime());
			TestLog("scanAction-tbl.get(in): " + tbl.get(in));
			TestLog("scanAction-rtMgr.threshold: " + rtMgr.threshold);
			TestLog("**********scanAction--cur-tbl.get(in): " + (cur.getTime()-tbl.get(in)));
			if (cur.getTime() - tbl.get(in) > rtMgr.threshold) {
				//tell routing manager that some broker is timeout and remove the item
				tbl.remove(in);
				rtMgr.lost(in);
			}
		}
	}

	private void sendAction() {
		rtMgr.sendHrtMsg();
	}

	public void run() {
		// TODO Auto-generated method stub		
		try {
			while (true) {
				//added by shmily
					TestLog("run-q Before take: " + q.toString());
				MsgHeart msg = q.take();
				//added by shmily
					TestLog("run-q After take: " + q.toString());
				TestLog("run-msg.indicator: " + msg.indicator);
				tbl.put(msg.indicator, new Date().getTime());
				//added by shmily
				TestLog("tbl: " + tbl.toString());
			}
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			log.warn(e);
		}
	}

	public void addTarget(String indicator) {
		// TODO Auto-generated method stub
		//added by shmily
		TestLog("addTarget-tbl Before put: " + tbl.toString());
		tbl.put(indicator, new Date().getTime() + 1000);//add 1 minute to the new target
		//added by shmily
		TestLog("addTarget-tbl After put: " + tbl.toString());
	}

	public void onMsg(Object msg) {
		// TODO Auto-generated method stub
		MsgHeart heartMsg = (MsgHeart) msg;
		try {
			//added by shmily
				TestLog("onMsg-q Before put: " + q.toString());
			q.put(heartMsg);
			//added by shmily
				TestLog("onMsg-q After put: " + q.toString());
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			log.warn(e);

		}
	}

	public void removeTarget(String indicator) {
		// TODO Auto-generated method stub
		//added by shmily
		TestLog("removeTarget-tbl Before remove: " + tbl.toString());
		TestLog("removeTarget-indicator: " + indicator);
		if (tbl.containsKey(indicator))
			tbl.remove(indicator);
		//added by shmily
		TestLog("removeTarget-tbl After remove: " + tbl.toString());
	}
	
	public static void TestLog(String LogContent){
//		try {
//			testLog = new RandomAccessFile("C:\\testLog.log", "rw");
//			long fileLength = testLog.length();
//			testLog.seek(fileLength);
//			testLog.writeBytes(LogContent + "\r\n");
//			testLog.close();
//		} catch (IOException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
	}

}
