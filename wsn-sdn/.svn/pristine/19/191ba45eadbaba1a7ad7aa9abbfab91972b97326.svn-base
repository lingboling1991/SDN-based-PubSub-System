package org.apache.servicemix.application;

import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.Set;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.DeliveryMode;
import javax.jms.JMSException;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.jms.TextMessage;
import javax.jms.Topic;
import javax.jws.Oneway;
import javax.jws.WebMethod;
import javax.jws.WebService;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.annotation.XmlMixed;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.ws.Endpoint;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Source;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamSource;

import org.apache.servicemix.jmsImpl.JmsNotificationBrokerImpl;

import org.apache.activemq.ActiveMQConnection;
import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.servicemix.application.IWsnProcess;
import org.apache.servicemix.wsn.EndpointRegistrationException;
import org.apache.servicemix.wsn.push.ListItem;
import org.apache.servicemix.wsn.router.mgr.RtMgr;
import org.apache.servicemix.wsn.AbstractCreatePullPoint;
import org.apache.servicemix.wsn.AbstractNotificationBroker;
import org.apache.servicemix.wsn.AbstractSubscription;
import org.apache.servicemix.wsn.jms.JmsCreatePullPoint;
import org.apache.servicemix.wsn.jms.JmsSubscription;
import org.apache.servicemix.wsn.jms.JmsNotificationBroker;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import javax.jms.Message;
import org.oasis_open.docs.wsn.b_2.CreatePullPointResponse;
import org.oasis_open.docs.wsn.b_2.SubscribeResponse;

@WebService(endpointInterface="org.apache.servicemix.application.IWsnProcess",
serviceName="IWsnProcess")
public class WsnProcessImpl implements IWsnProcess{
	private static int counter = 0;
	private JmsCreatePullPoint createpullpoint = null;
	private JmsNotificationBroker notificationbroker = null;
	private ConnectionFactory connectionFactory = null;
	private Connection connection = null;
	private Session session = null;
	private Topic topic = null;
	public static List<ListItem> localtable;
	public static Queue<String> mes = new LinkedList<String>();
	private MessageProducer producer = null;
	private static Map<String, MessageProducer> topicMap = new LinkedHashMap<String, MessageProducer>();
	private static Log log = LogFactory.getLog(WsnProcessImpl.class);
    protected JAXBContext jaxbContext;
    protected Set<Class> endpointInterfaces ;
	
	public void init() throws JAXBException{
		String url = "tcp://localhost:61616";
		if(connectionFactory == null){
			// ConnectionFactory ：连接工厂，JMS 用它创建连接 
			connectionFactory = new ActiveMQConnectionFactory(
				ActiveMQConnection.DEFAULT_USER,
				ActiveMQConnection.DEFAULT_PASSWORD, url);
		}
        createpullpoint = new JmsCreatePullPoint("Brokername");
        createpullpoint.setConnectionFactory(connectionFactory);
        notificationbroker = new JmsNotificationBrokerImpl("Brokername");
        notificationbroker.setConnectionFactory(connectionFactory);
        try {
            createpullpoint.init();
			notificationbroker.init();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        endpointInterfaces = createEndpointInterfaces();
        jaxbContext = createJAXBContext(endpointInterfaces);
        RtMgr.getInstance();
        System.out.println("init finished!");
	}
	
	public Set<Class> createEndpointInterfaces()
	{
		Set<Class> Interfaces = new HashSet<Class>();
        // Check additional interfaces
        for (Class pojoClass = createpullpoint.getClass(); pojoClass != Object.class; pojoClass = pojoClass.getSuperclass()) {
            for (Class cl : pojoClass.getInterfaces()) {
                if (getWebServiceAnnotation(cl) != null) {
                    Interfaces.add(cl);
                }
            }
        }
        for (Class pojoClass = notificationbroker.getClass(); pojoClass != Object.class; pojoClass = pojoClass.getSuperclass()) {
            for (Class cl : pojoClass.getInterfaces()) {
                if (getWebServiceAnnotation(cl) != null) {
                    Interfaces.add(cl);
                }
            }
        }
        return Interfaces;
	}
	
	@SuppressWarnings("unchecked")
    protected WebService getWebServiceAnnotation(Class clazz) {
        for (Class cl = clazz; cl != null; cl = cl.getSuperclass()) {
            WebService ws = (WebService) cl.getAnnotation(WebService.class);
            if (ws != null) {
                return ws;
            }
        }
        return null;
    }
	
	public String WsnProcess(String message){
		
		Method webMethod = null;
		Object input;
		System.out.println("message:  "+message);
        Object output = "null";
        
		if(message.indexOf("wsnt:Notify")>0||message.indexOf("wsnt:NotificationMessage")>0){
			try {
				fast_Notify(message);
			} catch (JMSException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			return "sucess!";
		}
		else{
			Source source = new StreamSource(new java.io.StringReader(message));
			try {
				input = jaxbContext.createUnmarshaller().unmarshal(source);
				Class inputClass = input.getClass();
		        if (input instanceof JAXBElement) {
		            inputClass = ((JAXBElement) input).getDeclaredType();
		            input = ((JAXBElement) input).getValue(); 
		        }
		        for (Class clazz : endpointInterfaces) {
		            for (Method mth : clazz.getMethods()) {
		                Class[] params = mth.getParameterTypes();
		                if (params.length == 1 && params[0].isAssignableFrom(inputClass)) {
		                    if (webMethod == null) {
		                        webMethod = mth;
		                    } else if (!mth.getName().equals(webMethod.getName())) {
		                        throw new IllegalStateException("Multiple methods matching parameters");
		                    }
		                }
		            }
		        }
		        if (webMethod == null) {
		            throw new IllegalStateException("Could not determine invoked web method");
		        }
//		        System.out.println("************************invoke BEFORE" + new Date().getTime());
		        
		        boolean oneWay = webMethod.getAnnotation(Oneway.class) != null;
		        if(webMethod.getName().equals("createPullPoint"))
		        	output = webMethod.invoke(createpullpoint, new Object[] {input });
		        else
		        {	
		        	output = webMethod.invoke(notificationbroker, new Object[] {input });
		        	for(int i=0;i<WsnProcessImpl.localtable.size();i++){
		        		System.out.println(i+" "+WsnProcessImpl.localtable.get(i).getTopicName()+" "+WsnProcessImpl.localtable.get(i).getSubscriberAddress());
		        	}
		        }
			} catch (JAXBException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IllegalArgumentException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (InvocationTargetException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return convertResponse(output,webMethod);
		}
	}
	
	public String convertResponse(Object message,Method webmethod)
	{
		String ans = "";
		if(webmethod.getName().equals("createPullPoint"))
		{
			CreatePullPointResponse temp = (CreatePullPointResponse)message;
			ans = temp.getPullPoint().toString();
		}
		if(webmethod.getName().equals("subscribe"))
		{
			SubscribeResponse temp = (SubscribeResponse)message;
			ans = temp.getSubscriptionReference().toString();
		}
		return ans;
	}
	
	public void fast_Notify(String message) throws JMSException
	{
		System.out.println("Notificationmessage:  "+message);
		String topicname = splitstring("<wsnt:Topic Dialect=\"http://docs.oasis-open.org/wsn/t-1/TopicExpression/Simple\">","</wsnt:Topic>",message).trim();
		String address = "";
		System.out.println("topicname:  "+topicname);
		for(int i=0;i<WsnProcessImpl.localtable.size();i++){
				if(WsnProcessImpl.localtable.get(i).getTopicName().equals(topicname))
				{	
					address = WsnProcessImpl.localtable.get(i).getSubscriberAddress();
					Iterator iter = notificationbroker.subscriptions.entrySet().iterator();
					while (iter.hasNext()) {
						Map.Entry entry = (Map.Entry) iter.next();
						JmsSubscription val = (JmsSubscription)entry.getValue();
						System.out.println("subscribeaddress: "+val.subscriberAddress);
						System.out.println("address: "+address);
						if(val.subscriberAddress.equals(address)&&topicname.equals(val.jmsTopic.getTopicName()))
						{
							TextMessage jmsMessage = val.session.createTextMessage();
							jmsMessage.setText(message);
							val.onMessage(jmsMessage);
						}
					}
				}
		}
	}
	
	public static JAXBContext createJAXBContext(Iterable<Class> interfaceClasses) throws JAXBException {
        List<Class> classes = new ArrayList<Class>();
        classes.add(XmlException.class);
        for (Class interfaceClass : interfaceClasses) {
            for (Method mth : interfaceClass.getMethods()) {
                WebMethod wm = (WebMethod) mth.getAnnotation(WebMethod.class);
                if (wm != null) {
                    classes.add(mth.getReturnType());
                    classes.addAll(Arrays.asList(mth.getParameterTypes()));
                }
            }
        }
        return JAXBContext.newInstance(classes.toArray(new Class[classes.size()]));
    }
	@XmlRootElement(name = "Exception")
    public static class XmlException {
        private String stackTrace;
        public XmlException() {
        }
        public XmlException(Throwable e) {
            StringWriter sw = new StringWriter();
            e.printStackTrace(new PrintWriter(sw));
            stackTrace = sw.toString();
        }
        public String getStackTrace() {
            return stackTrace;
        }
        public void setStackTrace(String stackTrace) {
            this.stackTrace = stackTrace;
        }
        @XmlMixed
        public List getContent() {
            return Collections.singletonList(stackTrace);
        }
    }
	public String splitstring(String s,String e,String string)
    {
    	int start = string.indexOf(s) + s.length();
     	int end = string.indexOf(e);
     	return string.substring(start, end); 
    }
}

