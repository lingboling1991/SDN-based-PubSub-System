package org.apache.servicemix.wsn.router.mgr;

import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

public class ConnectQueuePool {
	protected ArrayBlockingQueue<QueueMsgNotis> msgq0;
	protected ArrayBlockingQueue<QueueMsgNotis> msgq1;
	protected ArrayBlockingQueue<QueueMsgNotis> msgq2;
	protected ArrayBlockingQueue<QueueMsgNotis> msgq3;
	protected ArrayBlockingQueue<QueueMsgNotis> msgq4;

	protected List<String> addrlist;
	protected List<ArrayBlockingQueue<QueueMsgNotis>> abqlist;

//	private List<Socket> sendlist;
//	private List<ObjectOutputStream> outputlist;
//	private List<ObjectInputStream> inputlist;

	protected List<SendSocket> sendsocketlist;
	protected SendSocket ss0;
	protected SendSocket ss1;
	protected SendSocket ss2;
	protected SendSocket ss3;
	protected SendSocket ss4;

	protected List<Date> datelist;

	public ConnectQueuePool() {
		msgq0 = new ArrayBlockingQueue<QueueMsgNotis>(10000);
		msgq1 = new ArrayBlockingQueue<QueueMsgNotis>(10000);
		msgq2 = new ArrayBlockingQueue<QueueMsgNotis>(10000);
		msgq3 = new ArrayBlockingQueue<QueueMsgNotis>(10000);
		msgq4 = new ArrayBlockingQueue<QueueMsgNotis>(10000);

		addrlist = new ArrayList<String>(5);
		abqlist = new ArrayList<ArrayBlockingQueue<QueueMsgNotis>>(5);

//		sendlist = new ArrayList<Socket>(5);
//		outputlist = new ArrayList<ObjectOutputStream>(5);
//		inputlist = new ArrayList<ObjectInputStream>(5);

		sendsocketlist = new ArrayList<SendSocket>(5);

		addrlist.add(0, null);
		abqlist.add(0, msgq0);
		addrlist.add(1, null);
		abqlist.add(1, msgq1);
		addrlist.add(2, null);
		abqlist.add(2, msgq2);
		addrlist.add(3, null);
		abqlist.add(3, msgq3);
		addrlist.add(4, null);
		abqlist.add(4, msgq4);

		ss0 = new SendSocket();
		sendsocketlist.add(0, ss0);
		ss1 = new SendSocket();
		sendsocketlist.add(1, ss1);
		ss2 = new SendSocket();
		sendsocketlist.add(2, ss2);
		ss3 = new SendSocket();
		sendsocketlist.add(3, ss3);
		ss4 = new SendSocket();
		sendsocketlist.add(4, ss4);

		datelist = new ArrayList<Date>(5);
		for (int i = 0; i < 5; i++) {
			datelist.add(i, null);
		}

	}

	public int getCqSize(ArrayBlockingQueue<QueueMsgNotis> abq) {
		return abq.size();
	}

	//向队列中添加消息，都放在队尾
	public void addCqLast(ArrayBlockingQueue<QueueMsgNotis> abq, QueueMsgNotis qmn)
	{
		try {
			abq.put(qmn);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	//获取排在队列首位的进程任务，并将其移除队列
	public QueueMsgNotis getCqFirst(ArrayBlockingQueue<QueueMsgNotis> abq)
	{
		try {
			return abq.take();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}

	//

	public synchronized void addCQueuelist(String addr) {
		for (int i = 0; i < 5; i++) {
			if (addrlist.get(i) == null) {
				addrlist.set(i, addr);
				return;
			}
		}
	}

	protected synchronized boolean isCQlistNoFull() {
		for (int i = 0; i < 5; i++) {
			if (addrlist.get(i) == null)
				return true;
		}
		return false;
	}

	protected synchronized boolean hadCQlist(String addr) {
		for (int i = 0; i < 5; i++) {
			if ((addrlist.get(i) != null) && (addrlist.get(i).equals(addr)))
				return true;
		}
		return false;
	}

	protected synchronized ArrayBlockingQueue<QueueMsgNotis> getCQlist(String adr) {
		for (int i = 0; i < 5; i++) {
			if (addrlist.get(i).equals(adr)) {
				return abqlist.get(i);
			}
		}
		return null;
	}

//	protected synchronized void setCQlistNull(int i) {
//		addrlist.set(i, null);
//		abqlist.set(i, null);
//	}
//
//	//扫描表，看看需不需要置空
//	protected synchronized void clearSendSocketList() {
//		for (int i = 0; i < 5; i++) {
//			if (sendsocketlist.get(i).getSocket().isClosed()) {
//				setCQlistNull(i);
//				if (i == 0)
//					msgq0.clear();
//				else if (i == 1)
//					msgq1.clear();
//				else if (i == 2)
//					msgq2.clear();
//				else if (i == 3)
//					msgq3.clear();
//				else if (i == 4)
//					msgq4.clear();
//			}
//		}
//	}

	protected synchronized Date getCQtime(String adr) {
		for (int i = 0; i < 5; i++) {
			if ((addrlist.get(i) != null) && (addrlist.get(i).equals(adr))) {
				return datelist.get(i);
			}
		}
		return null;
	}

	protected synchronized void setCQtime(String adr, Date date) {
		for (int i = 0; i < 5; i++) {
			if ((addrlist.get(i) != null) && (addrlist.get(i).equals(adr))) {
				datelist.set(i, date);
			}
		}
	}

}
