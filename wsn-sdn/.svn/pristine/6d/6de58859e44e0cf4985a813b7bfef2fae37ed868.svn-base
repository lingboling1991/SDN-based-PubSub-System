package org.apache.servicemix.wsn.router.mgr;

import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.ConcurrentHashMap;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.servicemix.wsn.push.SendNotification;
import org.apache.servicemix.wsn.router.detection.IDt;
import org.apache.servicemix.wsn.router.mgr.base.AState;
import org.apache.servicemix.wsn.router.mgr.MsgNotis;
import org.apache.servicemix.wsn.router.msg.tcp.MsgAdminChange;
import org.apache.servicemix.wsn.router.msg.tcp.MsgGroupJunk;
import org.apache.servicemix.wsn.router.msg.tcp.MsgInfoChange;
import org.apache.servicemix.wsn.router.msg.tcp.MsgJoinGroup;
import org.apache.servicemix.wsn.router.msg.tcp.MsgJoinGroup_;
import org.apache.servicemix.wsn.router.msg.tcp.MsgLookupGroupSubscriptions;
import org.apache.servicemix.wsn.router.msg.tcp.MsgLookupMemberSubscriptions;
import org.apache.servicemix.wsn.router.msg.tcp.MsgLookupMemberSubscriptions_;
import org.apache.servicemix.wsn.router.msg.tcp.MsgNewRep;
import org.apache.servicemix.wsn.router.msg.tcp.MsgSetAddr;
import org.apache.servicemix.wsn.router.msg.tcp.MsgSetConf;
import org.apache.servicemix.wsn.router.msg.tcp.MsgSynSubs;
import org.apache.servicemix.wsn.router.msg.udp.MsgGroup;
import org.apache.servicemix.wsn.router.msg.udp.MsgHeart;
import org.apache.servicemix.wsn.router.msg.udp.MsgLost;
import org.apache.servicemix.wsn.router.msg.udp.MsgNewBroker;
import org.apache.servicemix.wsn.router.msg.udp.MsgSubs;
import org.apache.servicemix.wsn.router.router.Router;

public class RegState extends AState {
	private static Log log = LogFactory.getLog(RegState.class);
	private RtMgr mgr;

	private IDt dt;

//	private ByteArrayOutputStream baosConstant = null;
//	private ObjectOutputStream oosConstant = null;
//	private DatagramSocket sConstant = null;

	public RegState(RtMgr mgr, IDt dt) {
		this.mgr = mgr;
		this.dt = dt;

//		this.baosConstant = new ByteArrayOutputStream();
//		try {
//			this.oosConstant = new ObjectOutputStream(baosConstant);
//			this.sConstant = new DatagramSocket();
//			this.sConstant.setSendBufferSize(1024 * 1024);
//		} catch (IOException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
	}

	@Override
	public void join() {
		// TODO Auto-generated method stub
		ObjectOutputStream oos = null;
		ObjectInputStream ois = null;
		Socket s = null;

		MsgJoinGroup mjg = new MsgJoinGroup();
		mjg.name = groupName;
		mjg.tPort = tPort;

		MsgJoinGroup_ mjg_ = null;
		for (int i = 0; i < joinTimes && !joinOK; i++) {

			try {

				s = new Socket(rep.addr, rep.tPort);
				oos = new ObjectOutputStream(s.getOutputStream());
				ois = new ObjectInputStream(s.getInputStream());
				oos.writeObject(mjg);
				mjg_ = (MsgJoinGroup_) ois.readObject();

				oos.close();
				ois.close();
				s.close();

			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				log.warn(e);
			} catch (ClassNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				log.warn(e);
			}

			if (mjg_ != null) {

				System.out.println("successfully join into group:" + mjg.name);
				log.info("successfully join into group:" + mjg.name);

				id = mjg_.id;

				brokerTable.putAll(mjg_.brokerTab);
				groupTable.putAll(mjg_.groupTab);
				neighbors.putAll(mjg_.neighbors);
				children.addAll(mjg_.children);
				groupMap.putAll(mjg_.groupMap);
				parent = mjg_.parent;

				joinOK = true;

				//send heart to representative
				dt.addTarget(rep.addr);

			}

		}

		//加入不成功，说明管理者处保存的代表实际已不再存在，所以通知其删去，并转换成rep
		if (!joinOK) {
			System.out.println("rep of group " + groupName + " no longer exist");
			log.info("rep of group " + groupName + " no longer exist");
			try {

				s = new Socket(adminAddr, adminPort);
				oos = new ObjectOutputStream(s.getOutputStream());
				ois = new ObjectInputStream(s.getInputStream());

				MsgGroupJunk mrl = new MsgGroupJunk();
				mrl.name = groupName;
				oos.writeObject(mrl);

				oos.close();
				ois.close();
				s.close();

			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				log.warn(e);
			}

			mgr.setState(mgr.getRepState());
			System.out.println("switch to rep state");
			log.info("switch to rep state");
		}

	}

	@Override
	public void sendHrt() {
		// TODO Auto-generated method stub
		ByteArrayOutputStream baos = null;
		ObjectOutputStream oos = null;
		DatagramSocket s = null;

		MsgHeart msg = new MsgHeart();
		msg.indicator = localAddr;

		try {

			baos = new ByteArrayOutputStream();
			oos = new ObjectOutputStream(baos);

			oos.writeObject(msg);
			byte[] buf = baos.toByteArray();

			DatagramPacket p = new DatagramPacket(buf, buf.length, InetAddress.getByName(rep.addr), uPort);
			s = new DatagramSocket();
			s.send(p);

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			log.warn(e);
		}
	}

	@Override
	public void sendSbp(Object msg) {
		// TODO Auto-generated method stub
		ByteArrayOutputStream baos = null;
		ObjectOutputStream oos = null;
		DatagramSocket s = null;

		MsgSubs mss = (MsgSubs) msg;
		mss.originator = localAddr;
		mss.sender = localAddr;

		try {

			baos = new ByteArrayOutputStream();
			oos = new ObjectOutputStream(baos);

			oos.writeObject(mss);
			byte[] buf = baos.toByteArray();

			DatagramPacket p = new DatagramPacket(buf, buf.length, InetAddress.getByName(multiAddr), uPort);
			s = new DatagramSocket();
			s.send(p);

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			log.warn(e);
		}
	}

	@Override
	public void lost(String indicator) {
		// TODO Auto-generated method stub
		System.out.println("lost: " + indicator);
		log.info("lost: " + indicator);

		//将id值最小的代理记录在tmp中
		BrokerUnit tmp = null;
		long tmpId = id;
		for (BrokerUnit b : neighbors.values())
			if (tmpId > b.id) {
				tmpId = b.id;
				tmp = b;
			}

		if (tmp == null) {
			//本代理成为新的代表

			mgr.setState(mgr.getRepState());//change state

			//add target to heart detection
			for (String ad : neighbors.keySet())
				dt.addTarget(ad);

			for (String ad : children)
				dt.addTarget(ad);

			if (!parent.equals(""))
				dt.addTarget(parent);

			MsgNewRep mnr = new MsgNewRep();
			mnr.name = groupName;
			mnr.addr = localAddr;
			mnr.tPort = tPort;
			mnr.uPort = uPort;
			mnr.id = id;
			mnr.sender = groupName;

			Socket s = null;
			ObjectOutputStream oos = null;
			ObjectInputStream ois = null;

			//notify administrator
			try {
				s = new Socket(adminAddr, adminPort);
				oos = new ObjectOutputStream(s.getOutputStream());
				ois = new ObjectInputStream(s.getInputStream());
				oos.writeObject(mnr);

				ois.close();
				oos.close();
				s.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				log.warn(e);
			}

			//notify neighbors
			ArrayList<String> li = new ArrayList<String>(children);
			li.add(parent);
			for (String n : li)
				if (groupMap.get(n) != null) {

					try {
						s = new Socket(groupMap.get(n).rep.addr, groupMap.get(n).rep.tPort);
						oos = new ObjectOutputStream(s.getOutputStream());
						ois = new ObjectInputStream(s.getInputStream());
						oos.writeObject(mnr);

						ois.close();
						oos.close();
						s.close();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
						log.warn(e);
					}

				}

			//cancel the subscriptions of this broker
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			DatagramSocket ds = null;
			DatagramPacket p = null;
			byte[] buf;

			try {
				ds = new DatagramSocket();
				oos = new ObjectOutputStream(baos);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				log.warn(e);
			}

			ArrayList<String> topics = new ArrayList<String>();
			for (String t : brokerTable.keySet()) {

				if (brokerTable.get(t).contains(indicator)) {
					brokerTable.get(t).remove(indicator);

					if (brokerTable.get(t).isEmpty()) {
						brokerTable.remove(t);

						if (!clientTable.contains(t)) {
							//tell other groups to cancel this subscription
							topics.add(t);
						}
					}
				}
			}
			if (topics.size() != 0) {
				MsgSubs mss = new MsgSubs();
				mss.type = 1;
				mss.topics = topics;
				mss.originator = groupName;
				mss.sender = groupName;

				try {
					oos.writeObject(mss);
					buf = baos.toByteArray();

					for (String n : li)
						if (groupMap.get(n) != null) {
							p = new DatagramPacket(buf, buf.length, InetAddress.getByName(groupMap
									.get(n).rep.addr), groupMap.get(n).uPort);
							ds.send(p);
						}
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					log.warn(e);
				}

			}

			//	rep = null;

		} else {

			rep = tmp;
			neighbors.remove(tmp.addr);

			dt.addTarget(rep.addr);

			for (String t : brokerTable.keySet()) {
				if (brokerTable.get(t).contains(indicator)) {
					brokerTable.get(t).remove(indicator);

					if (brokerTable.get(t).isEmpty())
						brokerTable.remove(t);
				}
			}

		}

	}

	@Override
	public void processUdpMsg(Object msg) {
		System.out.println(msg);

		if (msg instanceof MsgHeart) {

			dt.onMsg(msg);
			System.out.println("heart from " + ((MsgHeart) msg).indicator);
			log.info("heart from " + ((MsgHeart) msg).indicator);

		} else if (msg instanceof MsgAdminChange) {

			MsgAdminChange mac = (MsgAdminChange) msg;
			adminAddr = mac.NewAdminAddr;
			System.out.println("AdminAddress change to:" + adminAddr);
			log.info("AdminAddress change to：" + adminAddr);

		} else if (msg instanceof MsgNewBroker) {//如果本集群有新的成员

			MsgNewBroker mnm = (MsgNewBroker) msg;
			System.out.println("new broker: " + mnm.broker.addr);
			log.info("new broker: " + mnm.broker.addr);

			if (mnm.name.equals(groupName)) {

				neighbors.put(mnm.broker.addr, mnm.broker);
			}

		} else if (msg instanceof MsgNewRep) {

			MsgNewRep mnr = (MsgNewRep) msg;
			System.out.println("group: " + mnr.name + " new rep");
			log.info("group: " + mnr.name + " new rep");

			GroupUnit g = groupMap.get(mnr.name);
			if (g == null) {
				g = new GroupUnit();
				g.name = mnr.name;
				g.uPort = mnr.uPort;
				g.date = new Date();
				groupMap.put(g.name, g);
			}
			g.rep.addr = mnr.addr;
			g.rep.id = mnr.id;
			g.rep.tPort = mnr.tPort;
			g.uPort = mnr.uPort;

		} else if (msg instanceof MsgSubs) {

			MsgSubs mss = (MsgSubs) msg;
			System.out.println("subs: " + mss.originator);
			log.info("subs: " + mss.originator);

			ConcurrentHashMap<String, TreeSet<String>> table = null;

			if (neighbors.containsKey(mss.originator) || rep.addr.equals(mss.originator)) {
				//if it comes from this group
				table = brokerTable;
			} else {
				//from outside the group
				table = groupTable;
			}

			for (String t : mss.topics) {
				if (table.containsKey(t)) {
					if (mss.type == 0)
						table.get(t).add(mss.originator);
					else {
						table.get(t).remove(mss.originator);
						if (table.get(t).isEmpty())
							table.remove(t);
					}

				} else if (mss.type == 0) {
					TreeSet<String> ts = new TreeSet<String>();
					ts.add(mss.originator);
					table.put(t, ts);
				}
			}

		} else if (msg instanceof MsgLost) {

			MsgLost ml = (MsgLost) msg;
			System.out.println("lost: " + ml.indicator);
			log.info("lost: " + ml.indicator);

			if (ml.inside) {

				for (String t : brokerTable.keySet()) {

					if (brokerTable.get(t).contains(ml.indicator)) {

						brokerTable.get(t).remove(ml.indicator);
						if (brokerTable.get(t).isEmpty())
							brokerTable.remove(t);

					}

				}

				neighbors.remove(ml.indicator);

			} else {

				for (String t : groupTable.keySet()) {

					if (groupTable.get(t).contains(ml.indicator)) {

						groupTable.get(t).remove(ml.indicator);
						if (groupTable.get(t).isEmpty())
							groupTable.remove(t);

					}

				}

				if (parent.equals(ml.indicator))
					parent = "";
				else if (children.contains(ml.indicator))
					children.remove(ml.indicator);

				groupMap.remove(ml.indicator);

			}

		} else if (msg instanceof MsgGroup) {

			MsgGroup mg = (MsgGroup) msg;
			System.out.println("comes group: " + mg.g.name);
			log.info("comes group: " + mg.g.name);

			//add this new group as a child 
			if (groupMap.keySet().contains(mg.g.name)) {
				//if this group already exists, update its information
				groupMap.get(mg.g.name).uPort = mg.g.uPort;
				groupMap.get(mg.g.name).rep.addr = mg.g.rep.addr;
				groupMap.get(mg.g.name).rep.id = mg.g.rep.id;
				groupMap.get(mg.g.name).rep.tPort = mg.g.rep.tPort;

			} else {
				GroupUnit g = new GroupUnit();
				g.rep.addr = mg.g.rep.addr;
				g.name = mg.g.name;
				g.rep.tPort = mg.g.rep.tPort;
				g.uPort = mg.g.uPort;
				g.rep.id = mg.g.rep.id;
				g.date = mg.g.date;

				groupMap.put(g.name, g);
			}

			if (mg.sender.equals(groupName))//the group inserts in our group
				children.add(mg.g.name);

		} else if (msg instanceof MsgSynSubs) {

			MsgSynSubs mss = (MsgSynSubs) msg;
			System.out.println("syn subs message: " + mss.originator);
			log.info("syn subs message: " + mss.originator);

			//更新相关订阅信息
			for (TreeSet<String> ss : groupTable.values())
				if (ss.contains(mss.originator))
					ss.remove(mss.originator);

			for (String t : mss.topics) {
				if (groupTable.keySet().contains(t))
					groupTable.get(t).add(mss.originator);
				else {
					TreeSet<String> ss = new TreeSet<String>();
					ss.add(mss.originator);
					groupTable.put(t, ss);
				}
			}

		} else {
			System.out.println("No this UDP msg!");
			log.info("No this UDP msg!");
		}

	}

	@Override
	public void processTcpMsg(final Socket s) {
		// TODO Auto-generated method stub
		new Thread() {
			public void run() {
				ObjectInputStream ois = null;
				ObjectOutputStream oos = null;
				Object msg = null;

				try {
					ois = new ObjectInputStream(s.getInputStream());
					oos = new ObjectOutputStream(s.getOutputStream());
					while (true) {
						msg = ois.readObject();//read 阻塞了，如果对方关闭了socket 系统会抛出io异常，从而关闭此方的socket，因为socket全双工，双方都要关
						if ((msg != null)) {
							boolean isLong = processKindTcpMsg(ois, oos, s, msg);
							if (!isLong) {
								break;
							}
						}
						else
							break;
					}
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					log.warn(e);
				} catch (ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					log.warn(e);
				}
				try {
					oos.close();
					ois.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					log.warn(e);
				}
			}
		}.start();
	}

	private boolean processKindTcpMsg(ObjectInputStream ois, ObjectOutputStream oos, Socket s, Object msg) {
		if (msg instanceof MsgSetAddr) {
			MsgSetAddr msa = (MsgSetAddr) msg;
			processSpecificTcpMsg(ois, oos, s, msa);
			return false;
		} else if (msg instanceof MsgInfoChange) {
			MsgInfoChange mic = (MsgInfoChange) msg;
			processSpecificTcpMsg(ois, oos, s, mic);
			return false;
		} else if (msg instanceof MsgSetConf) {
			MsgSetConf msc = (MsgSetConf) msg;
			processSpecificTcpMsg(ois, oos, s, msc);
			return false;
		} else if (msg instanceof MsgLookupMemberSubscriptions) {
			MsgLookupMemberSubscriptions mlms = (MsgLookupMemberSubscriptions) msg;
			processSpecificTcpMsg(ois, oos, s, mlms);
			return false;
		}
		else if (msg instanceof MsgNotis) {
			MsgNotis mns = (MsgNotis) msg;
			mgr.addMqLast(mns);
			Date timeNow2 = new Date();
			log.info("add a msg " + "Delay:" + (timeNow2.getTime() - mns.sendDate.getTime()) + ",and the Queue size is" + mgr
					.getMqSize());

//			System.out.println("Receive:topic" + mns.topicName + ":content" + mns.doc + ":startTime" + mns.sendDate);
			log.info("Receive:topic" + mns.topicName + ":content" + mns.doc + ":startTime" + mns.sendDate);
			return true;
		}
		else {
			System.out.println("No this TCP msg!");
			log.info("No this TCP msg!");
			return false;
		}
	}

	@Override
	public void synSubs() {
		// TODO Auto-generated method stub

	}

	@Override
	public void processNotisMsg(Object msg) {
		final MsgNotis mns = (MsgNotis) msg;
		Router testRouter = new Router();
		Vector<String> ret = testRouter.route(mns.topicName, mns.sender, mns.originatorGroup);

		if (clientTable.contains(mns.topicName) && (!mns.originatorAddr.equals(localAddr)))//本地有订阅并且不是消息产生者，则上交wsn。在这个地方不适合做多线程，全局变量，只读，也会出现问题
		{
			try {
				int flag = 1;
				while (flag == 1) {
					if (mgr.limitbool()) {
						mgr.add();
						mgr.pool.execute(new Thread() {
							public void run() {
								SendNotification SN = new SendNotification();
								try {
//									Date timeNow1 = new Date();
//									log.info("before WSN delay:" + (timeNow1
//											.getTime() - mns.sendDate
//											.getTime()) + "  " + "NUMBER" + mns.Ccount);
									SN.send(mns.doc);
//									Date timeNow = new Date();
//									log.info("Submit:topic" + mns.topicName + ":content" + mns.doc + ":startTime" + mns.sendDate + ":receiveTime" + timeNow + ":Delay2" + (timeNow
//											.getTime() - mns.sendDate
//											.getTime()) + "  " + "NUMBER" + mns.Ccount);
//									long tmp = timeNow.getTime() - timeNow1
//											.getTime();
//									if (tmp > 100)
//										mgr.limtTo1();
//									else if (tmp < 50)
//										mgr.addLimit();
									mgr.subtract();
								} catch (Exception e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
							}
						});
						flag = 0;
					}//if
					else {
						Thread.sleep(1);
					}
				}//while
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
				log.warn(e1);
			}
		}
		//		if(clientTable.contains(mns.topicName)&&(!mns.originatorAddr.equals(localAddr)))
//		{
//			Date timeNow=new Date();
//			System.out.println("Submit:topic"+mns.topicName+":content"+mns.doc+":startTime"+mns.sendDate+":receiveTime"+timeNow+":Delay"+(timeNow.getTime()-mns.sendDate.getTime()));
//			File file=new File("file.txt");
//			FileWriter FW = null;
//			try {
//				FW = new FileWriter(file,true);
//			} catch (IOException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//			BufferedWriter BW=new BufferedWriter(FW);
//			try {
//				BW.write("Receive:topic"+mns.topicName+":content"+mns.doc+":startTime"+mns.sendDate);
//				BW.write("Submit:topic"+mns.topicName+":content"+mns.doc+":startTime"+mns.sendDate+":receiveTime"+timeNow+":Delay"+(timeNow.getTime()-mns.sendDate.getTime()));
//			} catch (IOException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//			
//			try {
//				BW.flush();
//			} catch (IOException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//		}
		else {//本地代理是消息产生者，需要转发消息

			ByteArrayOutputStream baos = null;
			ObjectOutputStream oos = null;
			DatagramSocket s = null;

			Socket sTcp = null;
			ObjectOutputStream oosTcp = null;
			ObjectInputStream oisTcp = null;

			mns.sender = localAddr;

			if (mns.topicName.indexOf("EventType=1") >= 0) {//关键消息类型
				try {

					Iterator<String> it = ret.iterator();
					while (it.hasNext()) {
						String itNext = it.next();
						if (itNext.equals(groupName)) {
						}
						else if (groupMap.containsKey(itNext)) {
							sTcp = new Socket(groupMap.get(itNext).rep.addr, groupMap.get(itNext).rep.tPort);
							oosTcp = new ObjectOutputStream(sTcp.getOutputStream());
							oisTcp = new ObjectInputStream(sTcp.getInputStream());
							oosTcp.writeObject(mns);
						} else if ((neighbors.get(itNext)) != null) {

							sTcp = new Socket(neighbors.get(itNext).addr, neighbors.get(itNext).tPort);
							oosTcp = new ObjectOutputStream(sTcp.getOutputStream());
							oisTcp = new ObjectInputStream(sTcp.getInputStream());
							oosTcp.writeObject(mns);

						}
						log.info("Forward:topic" + mns.topicName + ":content" + mns.doc + ":startTime" + mns.sendDate);
						System.out.println("Forward:topic" + mns.topicName + ":content" + mns.doc + ":startTime" + mns.sendDate);
					}

				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					log.warn(e);
				} finally {
					if (!(sTcp == null)) {
						try {
							oisTcp.close();
							oosTcp.close();
							sTcp.close();
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
							log.warn(e);
						}
					}

				}//finally
			} else {//普通消息，非关键消息类型

				Iterator<String> it = ret.iterator();
				int multiTimes = 0;//保证组播的话，一个组内，一次就足够了
				while (it.hasNext()) {
					String itNext = it.next();
					if (itNext.equals(groupName)) {
					}
					else if (groupMap.containsKey(itNext)) {
						String address = groupMap.get(itNext).rep.addr;

						QueueMsgNotis qmn = new QueueMsgNotis(address, groupMap.get(itNext).rep.tPort, mns);
						if (mgr.connectqueuepool.hadCQlist(address)) {
							Date time = new Date();
							mgr.connectqueuepool.setCQtime(address, time);
							mgr.connectqueuepool
									.addCqLast(mgr.connectqueuepool
											.getCQlist(address), qmn);
						}
						else {
							if (mgr.connectqueuepool.isCQlistNoFull()) {
								mgr.connectqueuepool.addCQueuelist(address);
								Date time = new Date();
								mgr.connectqueuepool.setCQtime(address, time);
								mgr.connectqueuepool
										.addCqLast(mgr.connectqueuepool
												.getCQlist(address), qmn);
							}
							else {
								Date time = new Date();
								for (int i = 0; i < 5; i++) {
									if (mgr.connectqueuepool.datelist.get(i) != null) {
										if ((time.getTime() - mgr.connectqueuepool.datelist
												.get(i).getTime()) > 120000) {
											mgr.connectqueuepool.addrlist
													.set(i, null);
											mgr.connectqueuepool.abqlist
													.get(i)
													.clear();
											mgr.connectqueuepool.datelist
													.set(i, null);
											try {
												mgr.connectqueuepool.sendsocketlist
														.get(i)
														.getInputStream()
														.close();
												mgr.connectqueuepool.sendsocketlist
														.get(i)
														.getOutputStream()
														.close();
												mgr.connectqueuepool.sendsocketlist
														.get(i)
														.getSocket()
														.close();
											} catch (IOException e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
										}
									}
								}
//								mgr.connectqueuepool.clearSendSocketList();
								mgr.connectpool.addCqLast(qmn);
							}
						}
					} else if (multiTimes == 0) {
						multiTimes = 1;

						try {//顺序不能随便变
							baos = new ByteArrayOutputStream();

							oos = new ObjectOutputStream(baos);
							s = new DatagramSocket();
							s.setSendBufferSize(1024 * 1024);

							oos.writeObject(mns);
							byte[] buf = baos.toByteArray();
							DatagramPacket p = new DatagramPacket(buf, buf.length, InetAddress
									.getByName(multiAddr), uPort);
							s.send(p);
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						try {
							baos.close();
							oos.close();
							s.close();
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
							log.warn(e);
						}
						log.info("Multicast:topic" + mns.topicName + ":content" + mns.doc + ":startTime" + mns.sendDate);
//						System.out.println("Multicast:topic" + mns.topicName + ":content" + mns.doc + ":startTime" + mns.sendDate);

					}
				}
			}
		}
	}

	@Override
	public void provideNotisMsg(Object msg) {
		MsgNotis mns = (MsgNotis) msg;
		mgr.addMqLast(mns);
		log.info("add a msg,and the Queue size is" + mgr.getMqSize());
//		System.out.println("add a msg,and the Queue size is" + mgr.getMqSize());

		log.info("WSN Get:topic" + mns.topicName + ":content" + mns.doc + ":startTime" + mns.sendDate);
//		System.out.println("WSN Get:topic" + mns.topicName + ":content" + mns.doc + ":startTime" + mns.sendDate);
	}

	private void processSpecificTcpMsg(ObjectInputStream ois, ObjectOutputStream oos, Socket s, MsgSetAddr msa) {
		System.out.println("set address: " + msa.addr);
		log.info("set address: " + msa.addr);

		if (!localAddr.equals(msa.addr) || tPort != msa.port) {
			MsgInfoChange mic = new MsgInfoChange();
			mic.originator = localAddr;
			mic.sender = localAddr;
			mic.addr = msa.addr;
			mic.port = msa.port;

			Socket s1 = null;
			ObjectOutputStream oos1 = null;
			ObjectInputStream ois1 = null;

			ArrayList<BrokerUnit> brokers = new ArrayList<BrokerUnit>(neighbors.values());
			brokers.add(rep);
			for (BrokerUnit b : brokers) {
				try {
					s1 = new Socket(b.addr, b.tPort);
					oos1 = new ObjectOutputStream(s1.getOutputStream());
					ois1 = new ObjectInputStream(s1.getInputStream());
					oos1.writeObject(mic);

					oos1.close();
					ois1.close();
					s1.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					log.warn(e);
				}
			}

			localAddr = msa.addr;
			tPort = msa.port;
			mgr.updateTcpSkt();
			mgr.updateUdpSkt();
		}
	}

	private void processSpecificTcpMsg(ObjectInputStream ois, ObjectOutputStream oos, Socket s, MsgInfoChange mic) {
		if (rep.addr.equals(mic.originator)) {
			//inside
			dt.removeTarget(rep.addr);
			rep.addr = mic.addr;
			rep.tPort = mic.port;
			dt.addTarget(rep.addr);

		} else if (neighbors.containsKey(mic.originator)) {
			//inside
			neighbors.get(mic.originator).addr = mic.addr;
			neighbors.get(mic.originator).tPort = mic.port;

		} else if (groupMap.contains(mic.originator)) {
			//outside
			groupMap.get(mic.originator).rep.addr = mic.addr;
			groupMap.get(mic.originator).rep.tPort = mic.port;

		}
	}

	private void processSpecificTcpMsg(ObjectInputStream ois, ObjectOutputStream oos, Socket s, MsgSetConf msc) {
		System.out.println("set configurations");
		log.info("set configurations");

		if (msc.address == null || msc.address.equals(localAddr)) {

			childrenSize = msc.conf_.childrenSize;
			joinTimes = msc.conf_.joinTimes;

			if (threshold != msc.conf_.lostThreshold) {
				threshold = msc.conf_.lostThreshold;
				dt.setThreshold(threshold);
			}
			if (scanPeriod != msc.conf_.scanPeriod) {
				scanPeriod = msc.conf_.scanPeriod;
				dt.setScanPeriod(scanPeriod);
			}
			if (sendPeriod != msc.conf_.sendPeriod) {
				sendPeriod = msc.conf_.sendPeriod;
				dt.setSendPeriod(sendPeriod);
			}
			if (synPeriod != msc.conf_.synPeriod) {
				synPeriod = msc.conf_.synPeriod;
				dt.setSynPeriod(synPeriod);
			}
			if (uPort != msc.conf_.uPort || !multiAddr.equals(msc.conf_.multiAddr)) {
				uPort = msc.conf_.uPort;
				multiAddr = msc.conf_.multiAddr;
				mgr.updateUdpSkt();
			}

			System.out.println("configuration updated");
			log.info("configuration updated");

		}
	}

	private void processSpecificTcpMsg(ObjectInputStream ois, ObjectOutputStream oos, Socket s,
			MsgLookupMemberSubscriptions mlms) {
		System.out.println("look up member Subscriptions");
		log.info("look up member Subscriptions");

		if (mlms.name.equals(groupName) && mlms.addr.equals(localAddr)) {
			MsgLookupMemberSubscriptions_ mlms_ = new MsgLookupMemberSubscriptions_();
			for (String t : clientTable) {
				mlms_.topics.add(t);
			}//for

			try {
				oos.writeObject(mlms_);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				log.warn(e);
			}
		}//if	
	}

	public void forwardQ0Msg(Object qmn) {
		QueueMsgNotis qmn1 = (QueueMsgNotis) qmn;
		MsgNotis mns = (MsgNotis) qmn1.msg;

		Socket sTcp = null;
		ObjectOutputStream oosTcp = null;
		ObjectInputStream oisTcp = null;
		log.info("before new tcpconnect");

		if ((mgr.connectqueuepool.ss0.getSocket() != null) && (!mgr.connectqueuepool.ss0
				.getSocket().isClosed())) {

//			System.out.println("isclosed is " + mgr.connectqueuepool.ss0.getSocket().isClosed());
//			System.out.println("isInputShutdown is " + mgr.connectqueuepool.ss0.getSocket()
//					.isInputShutdown());
//			System.out.println("isOutputShutdown is " + mgr.connectqueuepool.ss0.getSocket()
//					.isOutputShutdown());
			sTcp = mgr.connectqueuepool.ss0.getSocket();
			oosTcp = mgr.connectqueuepool.ss0.getOutputStream();
			oisTcp = mgr.connectqueuepool.ss0.getInputStream();

			try {
				oosTcp.writeObject(mns);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				try {
					System.out.println("close socket");
					oisTcp.close();
					oosTcp.close();
					sTcp.close();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
					log.warn(e);
				}
			}

			log.info("theForward topic with q0");
			System.out.println("theForward topic with q0");
		}
		else {
			try {
				sTcp = new Socket(qmn1.addr, qmn1.port);
				log.info("new tcp connect" + qmn1.addr);
				oosTcp = new ObjectOutputStream(sTcp.getOutputStream());
				oisTcp = new ObjectInputStream(sTcp.getInputStream());

				sTcp.setSendBufferSize(1024 * 1024);

				oosTcp.writeObject(mns);
			} catch (UnknownHostException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			mgr.connectqueuepool.ss0.setSocket(sTcp, oosTcp, oisTcp);

			log.info("theForward topic with q0");
			System.out.println("theForward topic with q0");

		}

//		log.info("Forward: topic" + mns.topicName + ":content" + mns.doc + ":startTime" + mns.sendDate);
//		System.out.println("Forward:topic" + mns.topicName + ":content" + mns.doc + ":startTime" + mns.sendDate);
		log.info("have same name ,not close");

	}

	public void forwardQ1Msg(Object qmn) {
		QueueMsgNotis qmn1 = (QueueMsgNotis) qmn;
		MsgNotis mns = (MsgNotis) qmn1.msg;

		Socket sTcp = null;
		ObjectOutputStream oosTcp = null;
		ObjectInputStream oisTcp = null;
		log.info("before new tcpconnect");

		if ((mgr.connectqueuepool.ss1.getSocket() != null) && (!mgr.connectqueuepool.ss1
				.getSocket().isClosed())) {
			sTcp = mgr.connectqueuepool.ss1.getSocket();
			oosTcp = mgr.connectqueuepool.ss1.getOutputStream();
			oisTcp = mgr.connectqueuepool.ss1.getInputStream();

			try {
				oosTcp.writeObject(mns);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				try {
					oisTcp.close();
					oosTcp.close();
					sTcp.close();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
					log.warn(e);
				}
			}

			log.info("theForward topic  with q1");
		}
		else {
			try {
				sTcp = new Socket(qmn1.addr, qmn1.port);
				log.info("new tcp connect" + qmn1.addr);
				oosTcp = new ObjectOutputStream(sTcp.getOutputStream());
				oisTcp = new ObjectInputStream(sTcp.getInputStream());

				sTcp.setSendBufferSize(1024 * 1024);

				oosTcp.writeObject(mns);
			} catch (UnknownHostException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			mgr.connectqueuepool.ss1.setSocket(sTcp, oosTcp, oisTcp);

			log.info("theForward topic  with q1");

		}

//		log.info("Forward: topic" + mns.topicName + ":content" + mns.doc + ":startTime" + mns.sendDate);
//		System.out.println("Forward:topic" + mns.topicName + ":content" + mns.doc + ":startTime" + mns.sendDate);
		log.info("have same name ,not close");

	}

	public void forwardQ2Msg(Object qmn) {
		QueueMsgNotis qmn1 = (QueueMsgNotis) qmn;
		MsgNotis mns = (MsgNotis) qmn1.msg;

		Socket sTcp = null;
		ObjectOutputStream oosTcp = null;
		ObjectInputStream oisTcp = null;
		log.info("before new tcpconnect");

		if ((mgr.connectqueuepool.ss2.getSocket() != null) && (!mgr.connectqueuepool.ss2
				.getSocket().isClosed())) {
			sTcp = mgr.connectqueuepool.ss2.getSocket();
			oosTcp = mgr.connectqueuepool.ss2.getOutputStream();
			oisTcp = mgr.connectqueuepool.ss2.getInputStream();

			try {
				oosTcp.writeObject(mns);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				try {
					oisTcp.close();
					oosTcp.close();
					sTcp.close();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
					log.warn(e);
				}
			}

			log.info("theForward topic  with q2");
		}
		else {
			try {
				sTcp = new Socket(qmn1.addr, qmn1.port);
				log.info("new tcp connect" + qmn1.addr);
				oosTcp = new ObjectOutputStream(sTcp.getOutputStream());
				oisTcp = new ObjectInputStream(sTcp.getInputStream());

				sTcp.setSendBufferSize(1024 * 1024);

				oosTcp.writeObject(mns);
			} catch (UnknownHostException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			mgr.connectqueuepool.ss2.setSocket(sTcp, oosTcp, oisTcp);

			log.info("theForward topic  with q2");

		}

//		log.info("Forward: topic" + mns.topicName + ":content" + mns.doc + ":startTime" + mns.sendDate);
//		System.out.println("Forward:topic" + mns.topicName + ":content" + mns.doc + ":startTime" + mns.sendDate);
		log.info("have same name ,not close");

	}

	public void forwardQ3Msg(Object qmn) {
		QueueMsgNotis qmn1 = (QueueMsgNotis) qmn;
		MsgNotis mns = (MsgNotis) qmn1.msg;

		Socket sTcp = null;
		ObjectOutputStream oosTcp = null;
		ObjectInputStream oisTcp = null;
		log.info("before new tcpconnect");

		if ((mgr.connectqueuepool.ss3.getSocket() != null) && (!mgr.connectqueuepool.ss3
				.getSocket().isClosed())) {
			sTcp = mgr.connectqueuepool.ss3.getSocket();
			oosTcp = mgr.connectqueuepool.ss3.getOutputStream();
			oisTcp = mgr.connectqueuepool.ss3.getInputStream();

			try {
				oosTcp.writeObject(mns);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				try {
					oisTcp.close();
					oosTcp.close();
					sTcp.close();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
					log.warn(e);
				}
			}

			log.info("theForward topic  with q3");
		}
		else {
			try {
				sTcp = new Socket(qmn1.addr, qmn1.port);
				log.info("new tcp connect" + qmn1.addr);
				oosTcp = new ObjectOutputStream(sTcp.getOutputStream());
				oisTcp = new ObjectInputStream(sTcp.getInputStream());

				sTcp.setSendBufferSize(1024 * 1024);

				oosTcp.writeObject(mns);
			} catch (UnknownHostException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			mgr.connectqueuepool.ss3.setSocket(sTcp, oosTcp, oisTcp);

			log.info("theForward topic  with q3");

		}

//		log.info("Forward: topic" + mns.topicName + ":content" + mns.doc + ":startTime" + mns.sendDate);
//		System.out.println("Forward:topic" + mns.topicName + ":content" + mns.doc + ":startTime" + mns.sendDate);
		log.info("have same name ,not close");

	}

	public void forwardQ4Msg(Object qmn) {
		QueueMsgNotis qmn1 = (QueueMsgNotis) qmn;
		MsgNotis mns = (MsgNotis) qmn1.msg;

		Socket sTcp = null;
		ObjectOutputStream oosTcp = null;
		ObjectInputStream oisTcp = null;
		log.info("before new tcpconnect");

		if ((mgr.connectqueuepool.ss4.getSocket() != null) && (!mgr.connectqueuepool.ss4
				.getSocket().isClosed())) {
			sTcp = mgr.connectqueuepool.ss4.getSocket();
			oosTcp = mgr.connectqueuepool.ss4.getOutputStream();
			oisTcp = mgr.connectqueuepool.ss4.getInputStream();

			try {
				oosTcp.writeObject(mns);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				try {
					oisTcp.close();
					oosTcp.close();
					sTcp.close();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
					log.warn(e);
				}
			}

			log.info("theForward topic  with q4");
		}
		else {
			try {
				sTcp = new Socket(qmn1.addr, qmn1.port);
				log.info("new tcp connect" + qmn1.addr);
				oosTcp = new ObjectOutputStream(sTcp.getOutputStream());
				oisTcp = new ObjectInputStream(sTcp.getInputStream());

				sTcp.setSendBufferSize(1024 * 1024);

				oosTcp.writeObject(mns);
			} catch (UnknownHostException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			mgr.connectqueuepool.ss4.setSocket(sTcp, oosTcp, oisTcp);

			log.info("theForward topic  with q4");

		}

//		log.info("Forward: topic" + mns.topicName + ":content" + mns.doc + ":startTime" + mns.sendDate);
//		System.out.println("Forward:topic" + mns.topicName + ":content" + mns.doc + ":startTime" + mns.sendDate);
		log.info("have same name ,not close");

	}

	public void forwardOtherMsg(Object qmn) {
		QueueMsgNotis qmn1 = (QueueMsgNotis) qmn;
		MsgNotis mns = (MsgNotis) qmn1.msg;

		Socket sTcp = null;
		ObjectOutputStream oosTcp = null;
		ObjectInputStream oisTcp = null;

		log.info("before new tcpconnect");

		try {
			sTcp = new Socket(qmn1.addr, qmn1.port);
			log.info("new tcp connect" + qmn1.addr);
			oosTcp = new ObjectOutputStream(sTcp.getOutputStream());
			oisTcp = new ObjectInputStream(sTcp.getInputStream());
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		try {
			oosTcp.writeObject(mns);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		try {
			oisTcp.close();
			oosTcp.close();
			sTcp.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			log.warn(e);
		}

		log.info("theForward topic  with q");

//		log.info("Forward: topic" + mns.topicName + ":content" + mns.doc + ":startTime" + mns.sendDate);
//		System.out.println("Forward:topic" + mns.topicName + ":content" + mns.doc + ":startTime" + mns.sendDate);

		log.info("have same name ,not close");
	}
}
