package org.apache.servicemix.wsn.push;

import java.io.StringReader;
import java.io.StringWriter;
import java.util.Date;
import java.util.List;

import javax.xml.bind.JAXBContext;
import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.dom.DOMSource;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.http.impl.nio.client.DefaultHttpAsyncClient;
import org.apache.http.nio.client.HttpAsyncClient;
import org.apache.servicemix.application.WsnProcessImpl;
import org.apache.servicemix.wsn.AbstractNotificationBroker;
import org.apache.servicemix.wsn.jms.JmsSubscription;
import org.apache.servicemix.wsn.jms.ThreadPool;
import org.oasis_open.docs.wsn.b_2.Notify;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.xml.sax.InputSource;



public class SendNotification implements RouterSend{
//	public ThreadPool pool3 = new ThreadPool(3);
	public static List<ListItem> localtable;
	private static Log log = LogFactory.getLog(SendNotification.class);
	
	private boolean successfulFlag = true;
	
	public void setSuccessfulFlag(boolean _successfulFlag){
    	successfulFlag = _successfulFlag;
    	log.error("#####SendNotification: set the successfulFlag " + _successfulFlag);
    }
    public boolean getSuccessfulFlag(){
    	return successfulFlag;
    }
	
	/*
	 * (non-Javadoc)new added by wp
	 * @see org.apache.servicemix.wsn.push.RouterSend#send(java.lang.String)
	 * 原来，路由模块来的消息会模拟一个本地消息，将消息扔给NMR，现在从路由模块来的消息
	 * 也直接调用PushClient，将消息直接递交给ws
	 */
	public void send(String notification) throws Exception{
		int start = notification.indexOf("TopicExpression/Simple\">") + 24;
		int end = notification.indexOf("</wsnt:Topic>");
		String topicName = notification.substring(start, end);
//		if(topicName.contains("EventType=1")){
//			String tempTopicName = topicName.substring(0, topicName.indexOf("EventType=1"));
//			notification = notification.replaceAll(topicName, tempTopicName);
//		}
//		System.out.println("**************************our topicName  " + topicName);
		String subAddr = null;
		
		if(WsnProcessImpl.localtable != null){
			for(int i=0;i<WsnProcessImpl.localtable.size();i++){
				if(WsnProcessImpl.localtable.get(i).getTopicName().equals(topicName)){
					System.out.println("********diliver topic:" + topicName);
//					System.out.println("**************************notification  " + notification);
//					System.out.println("**************************subAddress  " + WSNComponent.localtable.get(i).getSubscriberAddress());
					if((WsnProcessImpl.localtable.get(i).getAsyClient() == null) || ((WsnProcessImpl.localtable.get(i).getHttpPost()) == null)){
//						System.out.println("**************************is empty!!!!  ");
					}
//保留温鹏代码					
/*					Runnable r = new PushClient(WSNComponent.localtable.get(i).getSubscriberAddress(), 
							notification, 
							WSNComponent.localtable.get(i).getAsyClient(),
							WSNComponent.localtable.get(i).getHttpPost());
            		Thread t = new Thread(r);
            		t.start();
*/
//				    PushClient r = new PushClient(WSNComponent.localtable.get(i).getSubscriberAddress(), 
//					notification, 
//					WSNComponent.localtable.get(i).getAsyClient(),
//					WSNComponent.localtable.get(i).getHttpPost());
//				    r.run();
//					Date date1 = new Date();
//            		JmsSubscription.pool1.execute(new Thread((Runnable)new PushClient(WSNComponent.localtable.get(i).getSubscriberAddress(),
//            				notification,
//            				WSNComponent.localtable.get(i).getAsyClient(),
//            				WSNComponent.localtable.get(i).getHttpPost())));
//            		r = new PushClient(WSNComponent.localtable.get(i).getSubscriberAddress(), 
//            				notification, 
////            				WSNComponent.localtable.get(i).getAsyClient(),
//            				JmsSubscription.asyClient,
//            				WSNComponent.localtable.get(i).getHttpPost());
            		if(getSuccessfulFlag() == true){
            			JmsSubscription.diliverToWebservice.doPush(WsnProcessImpl.localtable.get(i).getSubscriberAddress(),
    							notification,
    							JmsSubscription.asyClient,
    							WsnProcessImpl.localtable.get(i).getHttpPost(), this);
            		}else{
            			for(int j=0;j<WsnProcessImpl.localtable.size();j++){
    						if(WsnProcessImpl.localtable.get(j).getSubscriberAddress().equals(WsnProcessImpl.localtable.get(i).getSubscriberAddress()))
    							WsnProcessImpl.localtable.remove(j);
    					}
            			log.error("#####SendNotification: delete subscribe from WSNComponent.localtable");
            		}
				}
			}
		}	
//		Element content = getMessage(notification);
//		doNotify(content);	
	}
	
	protected Element getMessage(String notification) throws Exception{
		
		Notify notify = convert(notification);
		JAXBContext jaxbContext = JAXBContext.newInstance(Notify.class);
		StringWriter writer = new StringWriter();
    	jaxbContext.createMarshaller().marshal(notify, writer);
    	String notificationMessage = writer.toString();
		
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        Document doc = factory.newDocumentBuilder().parse(new InputSource(new StringReader(notificationMessage)));
        Element content = doc.getDocumentElement();
        return content;
	}
	
//	protected void doNotify(final Element content) throws Exception{
//		ServiceEndpoint ep = null;
//		String[] parts = split(AbstractNotificationBroker.BROKER_ADDR);
//        ep = JbiSubscription.getContextInstance().getEndpoint(new QName(parts[0], parts[1]), parts[2]);
//		MessageExchangeFactory factory = JbiSubscription.getContextInstance().getDeliveryChannel().createExchangeFactory(ep);
//        InOnly inonly = factory.createInOnlyExchange();
//        NormalizedMessage msg = inonly.createMessage();
//        inonly.setInMessage(msg);
//        msg.setContent(new DOMSource(content));
//        JbiSubscription.getContextInstance().getDeliveryChannel().send(inonly);
//	}
	
	protected Notify convert(String notification) throws Exception{
		
    	JAXBContext jaxbContext = JAXBContext.newInstance(Notify.class);
    	StringReader reader = new StringReader(notification);
    	Notify notify = (Notify) jaxbContext.createUnmarshaller().unmarshal(reader);
    	notify.setLocal(true);
    	
    	return notify;
	}
	protected String[] split(String uri) {
        char sep;
        if (uri.indexOf('/') > 0) {
            sep = '/';
        } else {
            sep = ':';
        }
        int idx1 = uri.lastIndexOf(sep);
        int idx2 = uri.lastIndexOf(sep, idx1 - 1);
        String epName = uri.substring(idx1 + 1);
        String svcName = uri.substring(idx2 + 1, idx1);
        String nsUri = uri.substring(0, idx2);
        return new String[] {nsUri, svcName, epName };
    }
}