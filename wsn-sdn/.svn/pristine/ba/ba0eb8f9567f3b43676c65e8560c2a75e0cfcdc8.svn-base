package org.apache.servicemix.jmsImpl;

import java.util.LinkedList;

import javax.xml.bind.JAXBContext;
import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.dom.DOMSource;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.servicemix.application.WsnProcessImpl;
import org.apache.servicemix.jmsImpl.JmsSubscriptionImpl;
import org.apache.servicemix.wsn.jms.JmsSubscription;
import org.apache.servicemix.wsn.push.ListItem;
import org.apache.servicemix.wsn.push.NotifyObserver;
import org.apache.servicemix.wsn.router.mgr.RtMgr;
import org.oasis_open.docs.wsn.b_2.Subscribe;
import org.oasis_open.docs.wsn.b_2.SubscribeCreationFailedFaultType;
import org.oasis_open.docs.wsn.bw_2.InvalidFilterFault;
import org.oasis_open.docs.wsn.bw_2.InvalidMessageContentExpressionFault;
import org.oasis_open.docs.wsn.bw_2.InvalidProducerPropertiesExpressionFault;
import org.oasis_open.docs.wsn.bw_2.InvalidTopicExpressionFault;
import org.oasis_open.docs.wsn.bw_2.SubscribeCreationFailedFault;
import org.oasis_open.docs.wsn.bw_2.TopicExpressionDialectUnknownFault;
import org.oasis_open.docs.wsn.bw_2.TopicNotSupportedFault;
import org.oasis_open.docs.wsn.bw_2.UnacceptableInitialTerminationTimeFault;
import org.oasis_open.docs.wsn.bw_2.UnrecognizedPolicyRequestFault;
import org.oasis_open.docs.wsn.bw_2.UnsupportedPolicyRequestFault;
import org.w3c.dom.Document;
import org.w3c.dom.DocumentFragment;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

public class JmsSubscriptionImpl extends JmsSubscription{
	private static Log log = LogFactory.getLog(JmsSubscriptionImpl.class);
    
    private NotifyObserver notifyObserver ;
    
    public JmsSubscriptionImpl(String name) {
        super(name);
        notifyObserver = new NotifyObserver();
    }
    
    
    @Override
    protected void start() throws SubscribeCreationFailedFault {
        super.start();
    }

    @Override
    protected void validateSubscription(Subscribe subscribeRequest) throws InvalidFilterFault,
            InvalidMessageContentExpressionFault, InvalidProducerPropertiesExpressionFault,
            InvalidTopicExpressionFault, SubscribeCreationFailedFault, TopicExpressionDialectUnknownFault,
            TopicNotSupportedFault, UnacceptableInitialTerminationTimeFault,
            UnsupportedPolicyRequestFault, UnrecognizedPolicyRequestFault {
        super.validateSubscription(subscribeRequest);
        try {
            //endpoint = resolveConsumer(subscribeRequest);
           } catch (Exception e) {
            SubscribeCreationFailedFaultType fault = new SubscribeCreationFailedFaultType();
            throw new SubscribeCreationFailedFault("Unable to resolve consumer reference endpoint", fault, e);
        }
//        if (endpoint == null) {
//            SubscribeCreationFailedFaultType fault = new SubscribeCreationFailedFaultType();
//            throw new SubscribeCreationFailedFault("Unable to resolve consumer reference endpoint", fault);
//        }
                       
        if(super.subscriberAddress != null){
        	String topicName = convertTopic(super.topic);
//        	System.out.println("*****************************convert topicName" + topicName);
        	
        	if(WsnProcessImpl.localtable == null){
        		WsnProcessImpl.localtable = new LinkedList<ListItem>();
        		ListItem newItem = new ListItem();
        		newItem.setSubscriberAddress(subscriberAddress);
        		newItem.setTopicName(topicName);
        		WsnProcessImpl.localtable.add(newItem);
        		
        		
        		
            	//NotifyObserver notify = new NotifyObserver(topicName,1);
            	notifyObserver.setTopicName(topicName);
            	notifyObserver.setKind(1);
        		notifyObserver.addObserver(RtMgr.getInstance());
            	log.debug("The new topic name is "+topicName);
            	notifyObserver.notifyMessage();
        	}
        	else{
        	
        		int nameCounter = 0;
        		int addressCounter = 0;

        		for(ListItem listItem : WsnProcessImpl.localtable){
        			if((listItem.getTopicName()==topicName))
        				nameCounter++;
        			if((listItem.getTopicName()==topicName)&&
        				(listItem.getSubscriberAddress()==subscriberAddress))
        				addressCounter++;
        			}
        		if(nameCounter==0){
        			//NotifyObserver notify = new NotifyObserver(topicName,1);
        			notifyObserver.setTopicName(topicName);
        			notifyObserver.setKind(1);
        			notifyObserver.addObserver(RtMgr.getInstance());
        			notifyObserver.notifyMessage();
        		}
        		if(addressCounter==0){
        			ListItem item = new ListItem();
        			item.setSubscriberAddress(subscriberAddress);
        			item.setTopicName(topicName);
        			WsnProcessImpl.localtable.add(item);
        		}
        	}
        }
        
    }


//    protected ServiceEndpoint resolveConsumer(Subscribe subscribeRequest) throws Exception {
//        // Try to resolve the WSA endpoint
//        JAXBContext ctx = JAXBContext.newInstance(Subscribe.class);
//        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
//        dbf.setNamespaceAware(true);
//        DocumentBuilder db = dbf.newDocumentBuilder();
//        Document doc = db.newDocument();
//        ctx.createMarshaller().marshal(subscribeRequest, doc);
//        NodeList nl = doc.getDocumentElement().getElementsByTagNameNS("http://docs.oasis-open.org/wsn/b-2",
//                "ConsumerReference");
//        if (nl.getLength() != 1) {
//            throw new Exception("Subscribe request must have exactly one ConsumerReference node");
//        }
//        Element el = (Element) nl.item(0);
//        DocumentFragment epr = doc.createDocumentFragment();
//        epr.appendChild(el);
//        ServiceEndpoint ep = getContext().resolveEndpointReference(epr);
//        if (ep == null) {
//            String[] parts = split(AbstractWSAClient.getWSAAddress(subscribeRequest.getConsumerReference()));
//            ep = getContext().getEndpoint(new QName(parts[0], parts[1]), parts[2]);
//        }
//        return ep;
//    }

    protected String[] split(String uri) {
        char sep;
        if (uri.indexOf('/') > 0) {
            sep = '/';
        } else {
            sep = ':';
        }
        int idx1 = uri.lastIndexOf(sep);
        int idx2 = uri.lastIndexOf(sep, idx1 - 1);
        String epName = uri.substring(idx1 + 1);
        String svcName = uri.substring(idx2 + 1, idx1);
        String nsUri = uri.substring(0, idx2);
        return new String[] {nsUri, svcName, epName };
    }

    @Override
    protected void doNotify(final Element content) {
//        try {
//        	
//        	MessageExchangeFactory factory = context.getDeliveryChannel().createExchangeFactory(endpoint);
//            InOnly inonly = factory.createInOnlyExchange();
//            NormalizedMessage msg = inonly.createMessage();
//            inonly.setInMessage(msg);
//            msg.setContent(new DOMSource(content));
//            context.getDeliveryChannel().send(inonly);
//        } catch (JBIException e) {
//            log.warn("Could not deliver notification", e);
//        }
    }

//    public ComponentContext getContext() {
//        return context;
//    }
//
//    public void setContext(ComponentContext context) {
//        this.context = context;
//        this.contextInstance = context;
//    }
}
